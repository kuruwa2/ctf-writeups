#!/usr/bin/env python3

from Crypto.Util.number import *
from sage.all import *

def hash_base(m):
    m = M(m)
    _M = M(zero_matrix(d))
    for i in range(d):
        for j in range(d):
            _M[i, j] = pow(Zn(2), m[i, j], n)
    return M(_M)

def matrox(a, b):
    a, b = M(a), M(b)
    R = zero_matrix(d)
    for i in range(d):
        for j in range(d):
            R[i, j] = int(a[i, j]) ^ int(b[i, j])
    return M(R)

n = 20474248118672564431085568112167867588651829
d, Zn = 5, Zmod(n)
M = MatrixSpace(Zn, d, d)
P = PolynomialRing(Zn, 'x')
x = P.gen()
h = x**d + x + 1

r = M([[ 2168977325369444782802512809005167009163457,  9637731563002649997560875900298785659999735, 11402741982195550777990817093767890991834736,  6248261665690503242396669505673833765541530, 18383713927317640760514600671318653784954042],
[16744026390724915738262959513570982580233867, 10819123318870588054961801715028528659245735,  5382293825969147064471127752184942873958882,  2344559383975384575566938072263260707083674,  6107831242377773278696901510341268870768483],
[13913478639322625565461944432421523802028490,  1657756157808133991943366467693421012417454, 20077078978711296540965234618986335826824167, 15787724170325517021960596569296223410283963, 11311327970428371404045885802092772454814312],
[ 6961572103900078883590821780051797472394845,  9455345930492634517894541442153982197931104,  7188007809979291502164073459871201264229019,  5450777010613496799286069470550372888274079, 19294083677962489844799387987438241606854764],
[ 2085952337131731679161648956407072286901978,  6312527395255217479599228946227018949620025,  3768572167307432043022080651953496439648407, 12149358492352082063390352013944276402659624,  1238053480843820309901822772557963596458725]]),
y = M([[ 9455266042843307825749316910810796871873373, 15333106063741475447799261101208428669252581, 17507977101165165875868259123812011424101505, 18840713703683969794184618879025658583771001,  8194677825423260832777930195809869229371863],
[12501728660245911874452737460699597975974127, 19510243647017562462989706821025083261970404, 16201393977361396153964696776216973010001356,  9663056411865435751212414658633217623172749,  3239680106699734686590526219042751814995824],
[ 3712586611180063604215543952289707697324027, 14733212399197986119485181728946640781107458,  2840139099323763287710523315368925837277792, 13720228569300291500610175158110171144774084,  6108815350519225911945135207538331156078296],
[ 7943973119701029382921917301472306070824581,  2869347305630973901685036806460889911095637, 10842022254827356928486285947954965977783240, 20363982398752260203093070660357855892929807,  3232527006736169029584220678644241677651188],
[18741615057330867264302735709730246936126331,  7207581826003452274777064725926668618294351, 12235279908760679864964056098862023499484670, 11395481161377031878998588680860748310228740, 14691306415490831547905993706341909177907668]])
c_2 = M([[ 7467508370111086497875591641000575993385737,   436730215933598480688770862716304678927061, 16388674389038775692052384536812272916184391,  1544929917235051621830007372321346311674993, 20266847919326089072814025756784393554435095],
[ 8525400103718228392870804572553779730855209,  6910832586632574200490719455813022347001485, 17879158289938108082881632425571195671456277, 10773037736439027909506921110474733019517450,  6673285991052846421739430171898388311111793],
[ 9870026505859633975247413380429542368374340,  3599087047295232637660012477486366289652163,  9771908525081529326761727267151928531319243, 19335625816265272435673905591707160166566864, 15219307175745538685718076680399058971932192],
[ 7121095235650179073589022177762837236165521, 10051305836914620675997951100253778882475518, 14120877609199150307731361282669945615365363,  3064435253345055470095756982744706296418025,   126078528977194834765813221549264972548412],
[18926039657432874696099563502261812215936524, 14159758827498805644159739654028640645658626,  4643672049840979864316682883185591331924981, 20293416534996028081504808704845564317319704,  5806383537343185356941724671128323142478351]])

for u in range(2, 15):
    for v in range(2, 15):
        meow = matrox(hash_base(h(r) ** u * y * h(r) ** v), c_2)
        if all(meow[i][j] < 2**128 for i in range(5) for j in range(5)):
            print(''.join([chr(len(bin(meow[i][j])[3:])) for i in range(5) for j in range(5)]))
#CCTF{PKCS_N0n_cOmMu74T!v3_rIn9}
