from Crypto.Util.number import *
import math

def bsgs(a, b, p, n):  # a ** x = b (mod p)
    m = math.ceil(math.sqrt(n))
    a_m = pow(inverse(a, p), m, p)
    ta = {}
    tb = {}
    ai = 1
    bi = b
    for i in range(m):
        if ai in tb:
            return tb[ai] * m + i
        ta[ai] = i
        if bi in ta:
            return i * m + ta[bi]
        tb[bi] = i
        ai = ai * a % p
        bi = bi * a_m % p

def crt(a, b, m, n):
    return a + m * ((b-a) * inverse(m,n) % n)

def crts(r, f):
    a, m = r[0], f[0]
    for b, n in zip(r[1:], f[1:]):
        a = crt(a, b, m, n)
        m *= n
    return a

p = 20791190570755130922928947801964452190519769750435544925062255974696146850722141930643732135612274029277314529315619316172129030110241481553706578805671
u = 4463636304123979753743134619636470427043596049609608137626660482074217506661926979718462246695911932491585160005816222398668879425699410289055836584666
v = 14384889675592139897496846931049885123814482107074538287146272084647011076491132922816061189479999375105359205688428357754739131291804120530920881117466
w = 18845964721839974266911625958109233609472285790030604846926773147315099546134141743375020621603942611755078543537573874364845687145036441598315367786335
ca, cb, cc = (13538232014656869127672582414750136057982546219364084858880327079666228627120189308178842392441097897298441572572262202981816533070700038326487897856526, 17021706082440728525383771171331466336010715768932263001356316539955800389027615527486961861794402713329829022442302138180489324363369597102764873049254, 16425471332241278002883146115709491617863803331097336788515154361317630754094191109820540152234840457557082388979034785931382000110015012524338028017872)

factor = [2, 5, 11, 29, 83, 127, 479, 593, 1187, 2857, 6673, 28429, 156059, 240881, 309107, 438667, 1135103, 4376857, 9180917, 15058229, 21059977, 221560561, 257411779, 826159861, 2057493127, 29736667721, 112167208091, 141919074931]

rmod = []
smod = []
for f in factor:
    rmod.append(bsgs(pow(u, p//f, p), pow(ca, p//f, p), p, f-1))
    smod.append(bsgs(pow(v, p//f, p), pow(cb, p//f, p), p, f-1))

r = crts(rmod, factor)
s = crts(smod, factor)
flag = cc * inverse(pow(w, r+s, p), p) % p

print(long_to_bytes(flag))

#CCTF{1mPr0v3D_CrYp7O_5yST3m_8Y_Boneh_Boyen_Shacham!}
